/* eslint-disable @next/next/no-img-element */
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/nazoupLL6NJ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
"use client"

import { JSX, SetStateAction, SVGProps, useState } from "react"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import Link from "next/link"

export function Hero() {
  const [isSecretUnlocked, setIsSecretUnlocked] = useState(false)
  const [mode, setMode] = useState("escort")
  const [filterOptions, setFilterOptions] = useState([
    { label: "Age", value: "age" },
    { label: "Ethnicity", value: "ethnicity" },
    { label: "Ratings", value: "ratings" },
  ])
  const [selectedFilter, setSelectedFilter] = useState<null | { label: string; value: string }>(null)
  const handleFilterChange = (filter: SetStateAction<{ label: string; value: string } | null>) => {
    setSelectedFilter(filter)
  }
  return (
    <div className="min-h-screen flex flex-col">
      <header className="flex items-center justify-between bg-[#000000] p-4 rounded-t-2xl">
        <div className="relative w-full max-w-md">
          <input
            type="text"
            placeholder="Enter a location"
            className="w-full p-2 bg-[#FFFFFF] text-[#000000] rounded-full pr-12"
          />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="absolute right-2 top-1/2 -translate-y-1/2 rounded-full border w-8 h-8"
              >
                <FilterIcon className="h-6 w-6 text-[#000000]" />
                <span className="sr-only">Filter</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              {filterOptions.map((filter) => (
                <DropdownMenuItem key={filter.value} onSelect={() => handleFilterChange(filter)}>
                  {filter.label}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="rounded-full border w-8 h-8">
              {mode === "escort" ? (
                <UserIcon className="h-6 w-6 text-[#FFFFFF]" />
              ) : (
                <HeartIcon className="h-6 w-6 text-[#FFFFFF]" />
              )}
              <span className="sr-only">Toggle mode</span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onSelect={() => setMode("escort")}>Escort Mode</DropdownMenuItem>
            <DropdownMenuItem onSelect={() => setMode("girlfriend")}>Girlfriend Mode</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </header>
      {isSecretUnlocked && mode === "girlfriend" && (
        <section className="bg-[#8B5CF6] p-4">
          <h2 className="text-2xl font-bold mb-4 text-[#FFFFFF]">Special Girlfriends</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
            {[...Array(12)].map((_, index) => (
              <div key={index} className="bg-[#000000] p-4 rounded-2xl rounded-b-3xl mt-4 mb-4">
                <img
                  src="/placeholder.svg"
                  alt="Girlfriend"
                  className="w-full aspect-square object-cover mb-2 rounded-t-2xl rounded-b-3xl"
                />
                <div className="text-center">
                  <h3 className="text-lg font-bold text-[#FFFFFF]">Special Girlfriend</h3>
                  <div className="flex items-center justify-center mb-2">
                    <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                    <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                    <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                    <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                    <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                  </div>
                  <p className="text-[#FFFFFF] text-sm">From $500 / hour</p>
                  <p className="text-[#FFFFFF] text-sm">Age: 21</p>
                  <p className="text-[#FFFFFF] text-sm">Ethnicity: Asian</p>
                </div>
              </div>
            ))}
          </div>
        </section>
      )}
      {mode === "escort" && (
        <main className="flex-1">
          <section className="mb-8">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
              {[...Array(18)].map((_, index) => (
                <div key={index} className="bg-[#000000] p-4 rounded-2xl rounded-b-3xl mt-4 mb-4">
                  <img
                    src="/placeholder.svg"
                    alt="Escort"
                    className="w-full aspect-square object-cover mb-2 rounded-t-2xl rounded-b-3xl"
                  />
                  <div className="text-center">
                    <h3 className="text-lg font-bold text-[#FFFFFF]">Escort Name</h3>
                    <div className="flex items-center justify-center mb-2">
                      <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                      <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                      <StarIcon className="w-4 h-4 fill-[#FFFFFF] stroke-[#000000]" />
                      <StarIcon className="w-4 h-4 fill-[#000000] stroke-[#FFFFFF]" />
                      <StarIcon className="w-4 h-4 fill-[#000000] stroke-[#FFFFFF]" />
                    </div>
                    <p className="text-[#FFFFFF] text-sm">From $250 / hour</p>
                    <p className="text-[#FFFFFF] text-sm">Age: 25</p>
                  </div>
                </div>
              ))}
            </div>
          </section>
        </main>
      )}
      <footer className="bg-[#000000] text-[#FFFFFF] p-4 mt-auto">
        <div className="container mx-auto flex flex-col md:flex-row justify-between items-center">
          <div className="flex flex-col md:flex-row gap-4">
            <Link href="#" className="hover:underline text-sm" prefetch={false}>
              Home
            </Link>
            <Link href="#" className="hover:underline text-sm" prefetch={false}>
              Blog
            </Link>
            <Link href="#" className="hover:underline text-sm" prefetch={false}>
              Login
            </Link>
            <Link href="#" className="hover:underline text-sm" prefetch={false}>
              Advertise on RG
            </Link>
          </div>
          <div className="flex flex-col md:flex-row gap-4">
            <Link href="#" className="hover:underline text-sm" prefetch={false}>
              Popular Locations
            </Link>
            <Link href="#" className="hover:underline text-sm" prefetch={false}>
              Live Cams
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}

function FilterIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  )
}


function HeartIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
    </svg>
  )
}


function StarIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  )
}


function UserIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
      <circle cx="12" cy="7" r="4" />
    </svg>
  )
}// If Hero is meant to be a page component
import React from 'react';

const HeroPage = () => {
  return (
    <div>
      {/* Your Hero component's JSX here */}
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" strokeLinejoin="round">
        <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
        <circle cx="12" cy="7" r="4" />
      </svg>
    </div>
  );
};

export default HeroPage;